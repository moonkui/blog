<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Moon Kui</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-06-23T15:00:50.844Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>kui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>正则表达式1</title>
    <link href="http://example.com/2021/06/23/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F1/"/>
    <id>http://example.com/2021/06/23/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F1/</id>
    <published>2021-06-23T15:00:50.000Z</published>
    <updated>2021-06-23T15:00:50.844Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>模版字符串</title>
    <link href="http://example.com/2021/06/23/%E6%A8%A1%E7%89%88%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://example.com/2021/06/23/%E6%A8%A1%E7%89%88%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2021-06-23T09:41:42.000Z</published>
    <updated>2021-06-24T02:53:23.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h2><p>模版字符串也叫模版字面量，是允许嵌入表达式的字符串字面量，可以使用多行字符串和字符串插值功能</p><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><ol><li>最简单的用法看起来只是用反撇号（`)替换了单、双引号<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let message = `hello world`;</span><br><span class="line"></span><br><span class="line">console.log(message);          //&quot;hello world&quot;</span><br><span class="line">console.log(typeof(message));  //&quot;string&quot;</span><br><span class="line">console.log(message.length);   //11</span><br></pre></td></tr></table></figure></li><li>想在字符串中使用反撇号，那么用反斜杠（\）将它转义即可，而在模版字面量中，不需要转义单、双引号<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let message = `hello\`world!`;</span><br><span class="line"></span><br><span class="line">console.log(message);  //&quot;hello`world!&quot;</span><br></pre></td></tr></table></figure><span id="more"></span></li></ol><h2 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h2><p>模版字面量前，想输出为新的一行，需手动加入换行符,或者依靠数组或字符串拼接的方法来创建多行字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var message = &quot;javascript\nstring&quot;;</span><br><span class="line">   console.log(message);//&quot;javascript&quot;</span><br><span class="line">                        //&quot;string&quot;</span><br><span class="line">                  </span><br><span class="line"> var message1 = &quot;javascript\n&quot; +</span><br><span class="line">      &quot;string&quot;;</span><br><span class="line">    var message2 = [&quot;javascript&quot;, &quot;string&quot;].join(&quot;\n&quot;)</span><br><span class="line">    console.log(message1);          //&quot;javascript&quot;</span><br><span class="line">                                    //&quot;string&quot;</span><br><span class="line">    console.log(message2);          //&quot;javascript&quot;</span><br><span class="line">                                    //&quot;string&quot;</span><br><span class="line">    console.log(message1.length);   //17</span><br><span class="line">    console.log(message2.length);   //17</span><br><span class="line">          </span><br></pre></td></tr></table></figure><h3 id="简化多行字符串"><a href="#简化多行字符串" class="headerlink" title="简化多行字符串"></a>简化多行字符串</h3><p>在模版字面量中需要在字符串添加新的一行，只需在代码中直接换行，在反撇号中的所有空白符都属于字符串的一部分，所以千万要小心缩进。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var message1 = `javascript</span><br><span class="line">string`;</span><br><span class="line">console.log(message1);         //&quot;javascript&quot;</span><br><span class="line">                               //&quot;string&quot;</span><br><span class="line">console.log(message1.length);  //17</span><br><span class="line"></span><br><span class="line">var message2 = `javascript</span><br><span class="line">                string`;</span><br><span class="line">console.log(message2);         //&quot;javascript</span><br><span class="line">                               //                  string&quot;</span><br><span class="line">console.log(message2.length);  //33</span><br></pre></td></tr></table></figure><p>如果一定要通过适当的缩进来对齐文本，则可以考虑在多行模版字面量的第一行留白，并在后面的几行中缩进</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let html = `</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;title&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;`.trim();</span><br></pre></td></tr></table></figure><p>如果你喜欢也可以在模版字面量中显示地使用\n来指明应当插入新行的位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let message = `JavaScript\nString`;</span><br><span class="line">   console.log(message);         //&quot;JavaScript</span><br><span class="line">                                 //String&quot;</span><br><span class="line">   console.log(message.length);  //17</span><br></pre></td></tr></table></figure><h2 id="字符串占位符"><a href="#字符串占位符" class="headerlink" title="字符串占位符"></a>字符串占位符</h2><p>占位符由一个左侧的${和右侧的}符号组成，中间可以包含任意的JavaScript表达式,如变量、运算式、函数调用等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//嵌入变量</span><br><span class="line">    let name = &quot;mo&quot;;</span><br><span class="line">    message1 = `hello $&#123;name&#125;.`;  //&quot;hello mo.&quot;&quot;</span><br><span class="line">    console.log(message1);</span><br><span class="line"></span><br><span class="line">    //嵌入运算式</span><br><span class="line">    let count = 10,</span><br><span class="line">      price = 0.25,</span><br><span class="line">      message2 = `$&#123;count&#125; items count $$&#123;(count * price).toFixed(2)&#125;.`;</span><br><span class="line">    console.log(message2);        //&quot;10 items count $2.50.&quot;</span><br></pre></td></tr></table></figure><p>模版字面量本身也是JavaScript表达式，所以也可以在一个模版字面量中嵌入另外一个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let name = &quot;mo&quot;,</span><br><span class="line">        message = `hello,$&#123;`my name is $&#123;name&#125;`&#125;.`;</span><br><span class="line">        console.log(message);  //&quot;hello,my name is mo.&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;含义&quot;&gt;&lt;a href=&quot;#含义&quot; class=&quot;headerlink&quot; title=&quot;含义&quot;&gt;&lt;/a&gt;含义&lt;/h2&gt;&lt;p&gt;模版字符串也叫模版字面量，是允许嵌入表达式的字符串字面量，可以使用多行字符串和字符串插值功能&lt;/p&gt;
&lt;h2 id=&quot;基础语法&quot;&gt;&lt;a href=&quot;#基础语法&quot; class=&quot;headerlink&quot; title=&quot;基础语法&quot;&gt;&lt;/a&gt;基础语法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;最简单的用法看起来只是用反撇号（`)替换了单、双引号&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let message = `hello world`;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(message);          //&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(typeof(message));  //&amp;quot;string&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(message.length);   //11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;想在字符串中使用反撇号，那么用反斜杠（\）将它转义即可，而在模版字面量中，不需要转义单、双引号&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let message = `hello\`world!`;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(message);  //&amp;quot;hello`world!&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>面试总结3（js）</title>
    <link href="http://example.com/2021/06/22/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%933%EF%BC%88js%EF%BC%89/"/>
    <id>http://example.com/2021/06/22/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%933%EF%BC%88js%EF%BC%89/</id>
    <published>2021-06-22T03:33:49.000Z</published>
    <updated>2021-06-23T09:41:03.203Z</updated>
    
    <content type="html"><![CDATA[<ol><li>数据类型有哪些？</li></ol><ul><li>原始值：Number Boolean String undefined null</li><li>引用值：array Object function…date RegExp</li></ul><ol start="2"><li>typeOf返回值 </li></ol><ul><li>String Number Boolean Object undefined function</li><li>typeOf(null)返回Object ,typeOf(array)返回Object</li></ul><ol start="3"><li>获取DOM节点的几种方式</li></ol><ul><li>通过id document.getElementById()</li><li>通过元素名 document.getElementsByTagName()</li><li>通过class document.getElementsByClassName()</li><li>通过属性名 docuemnt.getElementsByName()</li><li>document.querySelector()</li><li>document.querySelectorAll()<span id="more"></span></li></ul><ol start="4"><li>HTTP和HTTPS</li></ol><ul><li>HTTP协议通常承载于TCP协议之上，在HTTP和TCP之间添加一个安全协议层（SSL或TSL），这个时候就成了我们常说的HTTPS。默认HTTP的端口号为80，HTTPS的端口号为443</li></ul><ol start="5"><li>减少页面加载时间的方法</li></ol><ul><li>压缩Javascript css代码</li><li>优化图片（使用雪碧图/精灵图）</li><li>图片懒加载</li><li>减少HTTP请求（合并文件，合并图片）</li><li>少使用图片</li></ul><ol start="6"><li>怎么适应尺寸</li></ol><ul><li>使用媒体查询</li><li>使用弹性布局</li></ul><ol start="7"><li>下拉页面，实现快速加载页面</li></ol><ul><li>实现方式：监听滚动事件，使用分页加载，需要接口支持，如一次只加载20条记录，然后通过监听滚动事件，当快滚动到底部的时候加载下一页的数据</li></ul><ol start="8"><li>audio、video支持格式</li></ol><ul><li>video支持格式：Ogg、MPEG4、WEBM</li><li>audio支持格式：wav、mp3、ogg、acc、webm等格式</li></ul><ol start="9"><li>怎么解决跨域问题</li></ol><ul><li>设置代理服务器</li><li>后端设置跨域响应头</li><li>JSONP</li></ul><ol start="10"><li>数组去重方法</li></ol><ul><li></li></ul><ol start="11"><li>一个四则运算的字符串输出结果</li></ol><ol start="12"><li><p>数组不用排序找第二大的数</p></li><li><p>找出字符串数组第一个不重复的字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//法一：</span><br><span class="line">function test(str)&#123;</span><br><span class="line">            var len = str.length;</span><br><span class="line">              //循环字符串</span><br><span class="line">            for(var i = 0;i&lt;len;i++)&#123;</span><br><span class="line">              //截取i后面的字符串</span><br><span class="line">              var firStr = str.slice(i+1);</span><br><span class="line">              //截取i前面的字符串</span><br><span class="line">              var secStr = str.slice(0,i);</span><br><span class="line">              //判断i值是否存在于后面的字符串或者前面的字符串</span><br><span class="line">              if(firStr.indexOf(str[i]) == -1 &amp;&amp; secStr.indexOf(str[i]) == -1)&#123;</span><br><span class="line">                return str[i];</span><br><span class="line">              &#125;else&#123;</span><br><span class="line">                continue;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">//法二</span><br><span class="line">for(let x of str) &#123; </span><br><span class="line">   let reg = new RegExp(`$&#123;x&#125;`,&#x27;g&#x27;); //创建正则</span><br><span class="line">  </span><br><span class="line">    if (str.match(reg).length == 1)  &#123; </span><br><span class="line">      console.log(reg);</span><br><span class="line">      console.log(str.match(reg));</span><br><span class="line">    // 匹配正则, 如果匹配超过1个, 则表示有重复, 跳过, </span><br><span class="line">    // 如果只匹配到一个, 则输出</span><br><span class="line">    console.log(x); //输出第一个不重复的字符</span><br><span class="line">    break; //终止循环</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li></ol><ol start="14"><li>undefined和null的区别</li></ol><ul><li>null表示”没有对象”，即该处不应该有值，undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义</li><li>null转化为数值时为0，undefined，转为数值时是NaN</li><li>undefined == null(true)、 undefined===null(false)</li></ul><ol start="15"><li><p>数据库左链接和右链接的区别</p></li><li><p>vue中data是函数</p></li><li><p>去掉一个字符内所有的空格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot; 6 4 55 3 &quot;;</span><br><span class="line">var result = str.replace(/\s*/g,&quot;&quot;);</span><br><span class="line">console.log(result);//返回64553</span><br></pre></td></tr></table></figure></li></ol><ul><li>扩展</li><li>去除字符串内两头的空格 str1 = str.replace(/^\s*|\s*$/g,””)</li><li>去除字符串内左侧的空格 str1 = str.replace(/^\s*/,””)</li><li>去除字符串内右侧的空格 str1 = str.replace(/\s*$/g,””)</li></ul><ol start="18"><li><p>GET请求和POST请求的区别</p></li><li><p>js中==和===的区别</p></li></ol><ul><li>在==中， 只比较值。如果两个值类型不同也可能相等，如null == undefined</li><li>在===中，比较类型和值。如果值类型不同，肯定不相等</li></ul><ol start="20"><li><p>Ajax怎么用</p></li><li></li></ol>]]></content>
    
    
    <summary type="html">&lt;ol&gt;
&lt;li&gt;数据类型有哪些？&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;原始值：Number Boolean String undefined null&lt;/li&gt;
&lt;li&gt;引用值：array Object function…date RegExp&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;typeOf返回值 &lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;String Number Boolean Object undefined function&lt;/li&gt;
&lt;li&gt;typeOf(null)返回Object ,typeOf(array)返回Object&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;获取DOM节点的几种方式&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;通过id document.getElementById()&lt;/li&gt;
&lt;li&gt;通过元素名 document.getElementsByTagName()&lt;/li&gt;
&lt;li&gt;通过class document.getElementsByClassName()&lt;/li&gt;
&lt;li&gt;通过属性名 docuemnt.getElementsByName()&lt;/li&gt;
&lt;li&gt;document.querySelector()&lt;/li&gt;
&lt;li&gt;document.querySelectorAll()</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>数组字符串部分方法</title>
    <link href="http://example.com/2021/06/21/%E6%95%B0%E7%BB%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%83%A8%E5%88%86%E5%B1%9E%E6%80%A7%E7%94%A8%E6%B3%95/"/>
    <id>http://example.com/2021/06/21/%E6%95%B0%E7%BB%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%83%A8%E5%88%86%E5%B1%9E%E6%80%A7%E7%94%A8%E6%B3%95/</id>
    <published>2021-06-21T02:30:07.000Z</published>
    <updated>2021-06-22T03:42:15.343Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h2><ol><li>indexOf lastIndexOf</li></ol><ul><li>indexOf</li><li>定义：可返回数组中某个指定元素的位置</li><li>语法：array.indexOf(item,start)</li><li>用法：从头到尾检索数组，看是否含有对应元素，检索的位置是start对应位置或者从头开始（start参数未写时），检索到item则返回它第一次出现的位置，返回值为Number类型，未找到指定元素返回-1</li><li>lastIndexOf</li><li>定义：返回数组中指定元素最后出现的位置，从数组后面向前查找</li><li>语法：array.lastIndexOf(item,start)</li><li>用法：从尾部向前检索数组<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;c&quot;];</span><br><span class="line">  console.log(arr.indexOf(&quot;b&quot;));//返回1</span><br><span class="line">  console.log(arr.indexOf(&quot;c&quot;));//返回2</span><br><span class="line">  console.log(arr.indexOf(&quot;v&quot;));//返回-1</span><br><span class="line">  console.log(arr.lastIndexOf(&quot;c&quot;));//返回4</span><br><span class="line">  console.log(arr.lastIndexOf(&quot;c&quot;, -2));//返回2</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>includes</li></ol><ul><li>定义和用法：判断数组是否包含一个指定的值，是返回true，否则返回false</li><li>语法：array.includes(searchElement,fromIndex) fromIndex可写可不写，若为负值，则按升序从array.length + fromIndex的索引开始搜索，默认为0。fromIndex大于数组长度，返回false，该数组不会被搜索<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;c&quot;];</span><br><span class="line">  console.log(arr.includes(&quot;a&quot;)); //返回true</span><br><span class="line">  console.log(arr.includes(&quot;b&quot;,2));//返回false</span><br><span class="line">  console.log(arr.includes(&quot;b&quot;,-100));//返回true</span><br></pre></td></tr></table></figure><span id="more"></span></li></ul><ol start="3"><li>slice</li></ol><ul><li>定义：可从已有的数组中返回选定的元素，不会改变元素组</li><li>语法：array.slice(start,end) start为负数则从数组中倒数第几个元素开始提取，slice(-2)表示提取倒数第二个元素和最后一个元素<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var array = [1,2,3,4,5];</span><br><span class="line">  console.log(array.slice(1,3));//返回[2,3]</span><br><span class="line">  console.log(array.slice(-3));//返回[3,4,5]</span><br><span class="line">  console.log(array.slice(-3,-1));//返回[3,4]</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li>splice</li></ol><ul><li>定义和用法：用于添加或删除数组中的元素，此方法会改变原数组</li><li>语法：array.splice(index,howmany,item1,item2,…,itemX)</li><li>index:规定从何处添加或删除元素，是开始插入或删除数组元素的下标，必须是数字</li><li>howmany:可选，规定应删除多少元素，可以是0，若未规定此参数，则删除从index开始到元素组结尾的所有元素</li><li>item1,…,itemX:可选，要添加到数组的新元素</li><li>若有删除元素，返回值为被删除元素的数组,若无删除元素，只插入元素，返回值为空数组<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var array = [1, 2, 3, 4, 5, 6];</span><br><span class="line">console.log(array.splice(0, 3));//返回[1,2,3]</span><br><span class="line">console.log(array.splice(1, 0, 66, 77, 88));// 返回[]</span><br><span class="line">console.log(array);//返回[4,66,77,88,5,6]</span><br><span class="line">console.log(array.splice(-2, 2));//返回[5,6]</span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li>forEach</li></ol><ul><li> 定义及用法：用于调用数组的每个元素，并将元素传递给会调函数</li><li>注意：forEach()对于空数组是不会执行回调函数的 </li><li>语法：array.forEach(function(currentValue,index,arr),thisValue)</li><li>currentValue 必填，当前元素</li><li>index 可选 当前元素的索引值</li><li>arr 可选 当前元素所属的数组对象</li><li>thisValue 可选 传递给函数的值一般用”this”值，若此参数为空，”undefined”会传递给”this”值<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onclick=&quot;numbers.forEach(myFunction)&quot;&gt;按钮&lt;/button&gt;</span><br><span class="line">&lt;p&gt;数组总和：&lt;span id=&quot;demo&quot;&gt;&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var sum = 0;</span><br><span class="line">var numbers = [1,2,3,4,5,6,7,8,9,10];</span><br><span class="line">function myFunction(item)&#123;</span><br><span class="line">  sum += item;</span><br><span class="line">  demo.innerHTML = sum;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><ol start="6"><li>map</li></ol><ul><li>定义及用法：通过指定函数处理数组的每个元素，并返回处理后的数组，不会对空数组进行检测，不会改变原始数组</li><li>语法：array.map(function(currentValue,index,arr),thisValue)</li></ul><ol start="7"><li>for…of</li></ol><ul><li>定义及用法：ES6用法，遍历数组每一项</li></ul><ol start="8"><li>filter</li></ol><ul><li>定义及用法：检测数值元素，并返回符合条件所有元素的数组</li><li>语法：array.filter(function(currentValue,index,arr), thisValue)</li></ul><ol start="9"><li>push pop unshift shift</li></ol><ul><li>push 此方法会改变元素组，在数组后面添加一个或多个元素，并返回数组长度</li><li>pop 在数组后面删除一个元素，每次只能删除一个，返回删除的元素的值</li><li>unshift 此方法会改变元素组，在数组前面面添加一个或多个元素，并返回新数组长度 </li><li>shift 在数组前面删除第一个元素，每次只能删除一个，返回删除的元素的值<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var array = [1,2,3,4,5,6];</span><br><span class="line">console.log(array.push(22,33));//返回8</span><br><span class="line">console.log(array.pop());//返回33</span><br><span class="line">console.log(array);//返回[1,2,3,4,5,6,22]</span><br><span class="line">console.log(array.unshift(77,88));//返回9</span><br><span class="line">console.log(array);//返回[77,88,1,2,3,4,5,6,22]</span><br><span class="line">console.log(array.shift());//返回77</span><br></pre></td></tr></table></figure></li></ul><ol start="10"><li>join</li></ol><ul><li>定义和用法：把数组中的所有元素转换为一个字符串</li><li>语法：array.join(separator)</li><li>separator 指定要使用的分隔符，若省略则使用逗号作为分隔符<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var array = [1, 2, 3, 4, 5, 6];</span><br><span class="line">console.log(array.join());//返回1,2,3,4,5,6</span><br><span class="line">console.log(array.join(&quot;and&quot;));//返回1and2and3and4and5and6</span><br></pre></td></tr></table></figure></li></ul><ol start="11"><li>reverse</li></ol><ul><li>定义和用法：颠倒数组中元素的顺序</li><li>语法array.reverse()<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var array = [1, 2, 3, 4, 5, 6];</span><br><span class="line">console.log(array.reverse());//返回[6, 5, 4, 3, 2, 1]</span><br></pre></td></tr></table></figure></li></ul><h2 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h2><ol><li>indexOf lastIndexOf</li></ol><ul><li>indexOf</li><li>定义和用法：返回某个指定的字符串值在字符串中首次出现的位置，如果没有找到匹配的字符串则返回-1，此方法区分大小写</li><li>语法：string.indexOf(searchvalue,start)</li><li>searchvalue 必填 填写需检索的字符串</li><li>start 字符串开始检索的位置，合法取值为0-string Object.length - 1,若省略改值，则从字符串的首字符开始检索</li><li>lastIndexOf</li><li>定义和用法：可返回一个指定的字符串值最后出现的位置，如果指定第二个参数 start，则在一个字符串中的指定位置从后向前搜索。</li><li>注意：该方法将从后向前检索字符串，但返回是从起始位置 (0) 开始计算子字符串最后出现的位置。 看它是否含有字符串。</li><li>语法：string.lastIndexOf(searchvalue,start)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;to welcome to China&quot;;</span><br><span class="line"> console.log(str.indexOf(&quot;to&quot;));//返回0</span><br><span class="line"> console.log(str.lastIndexOf(&quot;to&quot;));//返回11</span><br><span class="line"> console.log(str.indexOf(&quot;on&quot;));//返回-1</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>includes</li></ol><ul><li>定义和用法：查找字符串是否包含指定的子字符串，找到返回true否则返回false，此方法区分大小写</li><li>string.includes(searchvalue,start)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;to welcome to China&quot;;</span><br><span class="line">console.log(str.includes(&quot;to&quot;));//返回true</span><br><span class="line">console.log(str.includes(&quot;you&quot;));//返回false</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>replace</li></ol><ul><li>定义和用法：替换与正则表达式匹配的子串</li><li>语法：string.replace(searchvalue,newvalue) 返回值为一个新的字符串<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;to welcome to China&quot;;</span><br><span class="line">console.log(str.replace(&quot;to&quot;,&quot;on&quot;));//返回on welcome to China</span><br><span class="line">console.log(str.replace(/to/g,&quot;on&quot;));//返回on welcome on China</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li>slice</li></ol><ul><li>定义和用法：提取字符串的片段，并在新的字符串中返回被提取的部分</li><li>语法：string.slice(start,end)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;to welcome to China&quot;;</span><br><span class="line">console.log(str.slice(2,7));//返回welc</span><br><span class="line">console.log(str.slice(2));//返回welcome to China</span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li>split</li></ol><ul><li>定义和用法：把字符串分割为子字符串数组,不改变原字符串，若把空字符串(“”)用作separator,那么stringObject中的每个字符之间都会被分割，返回类型为一个字符串数组</li><li>语法：string.split(separtor,limit)</li><li>separtor 可选，字符串或正则表达式，从该参数指定的地方分割</li><li>limit 可选，指定返回的数组的最大长度，若设置该参数，返回的子串不会多于这个参数指定的数组，若没有设置，整个字符串将会被分割<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;to welcome to China&quot;;</span><br><span class="line">console.log(str.split());//返回[&quot;to welcome to China&quot;]</span><br><span class="line">console.log(str.split(&quot;&quot;));//返回[&quot;t&quot;, &quot;o&quot;, &quot; &quot;, &quot;w&quot;, &quot;e&quot;, &quot;l&quot;, &quot;c&quot;, &quot;o&quot;, &quot;m&quot;, &quot;e&quot;, &quot; &quot;, &quot;t&quot;, &quot;o&quot;, &quot; &quot;, &quot;C&quot;, &quot;h&quot;, &quot;i&quot;, &quot;n&quot;, &quot;a&quot;]</span><br><span class="line">console.log(str.split(&quot; &quot;));//返回[&quot;to&quot;, &quot;welcome&quot;, &quot;to&quot;, &quot;China&quot;]</span><br><span class="line">console.log(str.split(&quot; &quot;,2));//返回[&quot;to&quot;, &quot;welcome&quot;]</span><br></pre></td></tr></table></figure></li></ul><ol start="6"><li>trim</li></ol><ul><li>定义和用法：移除字符串首尾空白符，空白符包括：空格、制表符tab、换行符等其他空白符等，不会改变原数组，不适用于null，undefined，Number类型</li><li>语法：string.trim()<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot; welcome     &quot;;</span><br><span class="line">console.log(str.trim());//返回welcome</span><br></pre></td></tr></table></figure></li></ul><ol start="7"><li>charAt()</li></ol><ul><li>定义和用法：返回指定索引位置的字符</li><li>语法：string.charAt(index)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;hello world i me you&quot;</span><br><span class="line">console.log(str.charAt(0));//返回h</span><br><span class="line">console.log(str.charAt(str.length - 1));//返回u</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;数组方法&quot;&gt;&lt;a href=&quot;#数组方法&quot; class=&quot;headerlink&quot; title=&quot;数组方法&quot;&gt;&lt;/a&gt;数组方法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;indexOf lastIndexOf&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;indexOf&lt;/li&gt;
&lt;li&gt;定义：可返回数组中某个指定元素的位置&lt;/li&gt;
&lt;li&gt;语法：array.indexOf(item,start)&lt;/li&gt;
&lt;li&gt;用法：从头到尾检索数组，看是否含有对应元素，检索的位置是start对应位置或者从头开始（start参数未写时），检索到item则返回它第一次出现的位置，返回值为Number类型，未找到指定元素返回-1&lt;/li&gt;
&lt;li&gt;lastIndexOf&lt;/li&gt;
&lt;li&gt;定义：返回数组中指定元素最后出现的位置，从数组后面向前查找&lt;/li&gt;
&lt;li&gt;语法：array.lastIndexOf(item,start)&lt;/li&gt;
&lt;li&gt;用法：从尾部向前检索数组&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var arr = [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;c&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  console.log(arr.indexOf(&amp;quot;b&amp;quot;));//返回1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  console.log(arr.indexOf(&amp;quot;c&amp;quot;));//返回2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  console.log(arr.indexOf(&amp;quot;v&amp;quot;));//返回-1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  console.log(arr.lastIndexOf(&amp;quot;c&amp;quot;));//返回4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  console.log(arr.lastIndexOf(&amp;quot;c&amp;quot;, -2));//返回2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;includes&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;定义和用法：判断数组是否包含一个指定的值，是返回true，否则返回false&lt;/li&gt;
&lt;li&gt;语法：array.includes(searchElement,fromIndex) fromIndex可写可不写，若为负值，则按升序从array.length + fromIndex的索引开始搜索，默认为0。fromIndex大于数组长度，返回false，该数组不会被搜索&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var arr = [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;c&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  console.log(arr.includes(&amp;quot;a&amp;quot;)); //返回true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  console.log(arr.includes(&amp;quot;b&amp;quot;,2));//返回false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  console.log(arr.includes(&amp;quot;b&amp;quot;,-100));//返回true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>面试总结2(css+css3)</title>
    <link href="http://example.com/2021/06/15/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%932(css+css3)/"/>
    <id>http://example.com/2021/06/15/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%932(css+css3)/</id>
    <published>2021-06-15T09:44:56.000Z</published>
    <updated>2021-06-23T09:44:59.228Z</updated>
    
    <content type="html"><![CDATA[<ol><li>display的值有哪些</li></ol><ul><li>none inline inline-block block inherit list-item run-in table inline-table table-row table-row-group table-header-group table-footer-group table-column table-column-group table-cell table-caption</li><li>none 此元素不会被显示</li><li>block 块级元素</li><li>inline 行内元素</li><li>inline-block 行内块元素</li><li>flex 弹性容器</li><li>inline-flex</li><li>inherit 从父元素继承display的值</li><li>list-item 此元素会作为列表显示</li><li>run-in 此元素会根据上下文作为块级元素或行内元素显示</li><li>table 此元素会类似块级表格显示类似（table标签)</li><li>inline-table 此元素会类似行内表格显示类似（table标签）</li><li>table-row-group  此元素作为一个或多个行来的分组来显示（类似tbody标签）</li><li>table-header-group 此元素作为一个或多个行来的分组来显示（类似thead标签）</li><li>table-footer-group 此元素作为一个或多个行来的分组来显示（类似tfoot标签）</li><li>table-row 此元素会作为一个表格行来显示（类似tr标签)</li><li>table-column-group 此元素会作为一个或多个列的分组来显示（类似colgroup标签）</li><li>table-column  此元素会作为一个单元格列来显示（col标签）</li><li>table-cell 此元素会作为一个表格单元格显示（类似td th标签）</li><li>table-caption 此元素会作为一个表格标题显示（类似caption标签） </li></ul><ol start="2"><li>position的值有哪些</li></ol><ul><li>注意：static relative absolute fixed sticky 为常用取值</li><li>static 默认值 没有定位，出现在正常的流中（忽略top bottom left right z-index)</li><li>relative 相对定位 相对于其正常位置定位</li><li>absolute 绝对定位 相对于static以外的第一个父元素进行定位</li><li>fixed 固定定位 相对于浏览器可视窗口进行定位</li><li>sticky 粘性定位 该定位基于用户滚动的位置</li><li>inherit  规定应该从父元素继承该属性</li><li>initial 设置该属性为默认值</li><li>注意：绝对定位、固定定位一定是块盒，一定不是浮动元素，没有外边距合并<span id="more"></span></li></ul><ol start="3"><li>定位元素水平垂直居中（取值为absolute fixed)</li></ol><ul><li>定宽高, top bottom left right值设为0，margin为auto</li></ul><ol start="4"><li>多个定位元素重叠时，堆叠上下文（z-index）</li></ol><ul><li>设置z-index 该值越大，越靠近用户</li><li>只有定位元素设置z-index有效</li><li>z-index 为负数时,遇到常规流，浮动元素会被其覆盖</li></ul><ol start="5"><li>清除浮动的几种方式</li></ol><ul><li><p>给父元素添加高度</p></li><li><p>给父元素添加一个类clearfix(优点：结构化正确，缺点：有兼容性问题)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">clearfix::after&#123;</span><br><span class="line">content:&quot;&quot;;</span><br><span class="line">display:block;</span><br><span class="line">clear:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>给父元素添加overflow:hidden;或者overflow:auto;或者overflow:scroll;</p><ul><li>优点：不存在语义化问题，代码量少</li><li>缺点：内容增多时容易造成不会自动换行的内容被隐藏掉，无法显示需要被溢出的元素</li></ul></li><li><p>在浮动元素后添加一个无内容的块级元素 并添加一个class为clear 在css中赋予 .clear{clear:both;} 即可清除浮动</p><ul><li>优点：简单，代码少，兼容性好</li><li>缺点：需要添加大量无语义元素，代码不够优雅，后期不易维护</li></ul></li><li><p>给浮动元素后面紧跟的元素添加clear属性</p></li></ul><ol start="6"><li>为什么要初始化css样式</li></ol><ul><li>浏览器的兼容性问题</li><li>提高编码质量</li><li>节约网页代码，节约网页加载时间，使代码更简洁</li></ul><ol start="7"><li><p>link和@import的区别</p></li><li><p>html5的布局方式</p></li></ol><ul><li>浮动</li><li>定位</li><li>分栏布局</li><li>弹性布局</li><li>响应式布局</li><li>栅格布局</li><li>流式布局</li></ul><ol start="9"><li>弹性布局的优点</li></ol><ul><li>适应性强，在做不同屏幕分辨率时很有用</li><li>可以随意按照宽度比例划分元素的宽高</li><li>可以轻易的改变元素的显示顺序</li><li>实现快捷易维护</li></ul><ol start="10"><li>实现3个div等分排在一行</li></ol><ul><li>法一 ：设置width:33.33% ，左浮动，清除浮动，box-sizing:border-box;</li><li>法二 ：设置弹性布局display:flex; 每个子元素flex:1;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    *&#123;</span><br><span class="line">      margin: 0;</span><br><span class="line">      padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    .clearfix&#123;</span><br><span class="line">      content: &quot;&quot;;</span><br><span class="line">      display: block;</span><br><span class="line">      clear: both;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .container&#123;</span><br><span class="line">      width: 100%;</span><br><span class="line">      height: 300px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .item&#123;</span><br><span class="line">      width: 33.33%;</span><br><span class="line">      height: 100%;</span><br><span class="line">      border: 1px solid #000;</span><br><span class="line">      box-sizing: border-box;</span><br><span class="line">      float: left;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div class=&quot;container clearfix&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;item item1&quot;&gt;1&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;item item2&quot;&gt;2&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;item item3&quot;&gt;3&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    *&#123;</span><br><span class="line">      margin: 0;</span><br><span class="line">      padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .container&#123;</span><br><span class="line">      width: 100%;</span><br><span class="line">      height: 300px;</span><br><span class="line">      display: flex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .item&#123;</span><br><span class="line">      height: 100%;</span><br><span class="line">      border: 1px solid #000;</span><br><span class="line">      flex: 1;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div class=&quot;container clearfix&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;item item1&quot;&gt;1&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;item item2&quot;&gt;2&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;item item3&quot;&gt;3&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><ol start="11"><li>两个红色矩形水平居中，垂直居中形成十字架(width:50px;height:150px;) 要求 两个div 三个div 五个div三种方法实现</li></ol><ul><li>两个div<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> &lt;style&gt;</span><br><span class="line">    .item&#123;</span><br><span class="line">    background: red;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    margin: auto;</span><br><span class="line">    &#125;</span><br><span class="line">    .item1&#123;</span><br><span class="line">      width: 50px;</span><br><span class="line">      height: 150px;</span><br><span class="line">    &#125;</span><br><span class="line">    .item2&#123;</span><br><span class="line">      width: 150px;</span><br><span class="line">      height: 50px;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div class=&quot;item item1&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;item item2 &quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li><li>三个div<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .container&#123;</span><br><span class="line">      width: 500px;</span><br><span class="line">      height: 500px;</span><br><span class="line">      border: 1px solid;</span><br><span class="line">      position: relative;</span><br><span class="line">    &#125;</span><br><span class="line">    .item&#123;</span><br><span class="line">    background: red;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    margin: auto;</span><br><span class="line">    &#125;</span><br><span class="line">    .item1&#123;</span><br><span class="line">      width: 50px;</span><br><span class="line">      height: 150px;</span><br><span class="line">    &#125;</span><br><span class="line">    .item2&#123;</span><br><span class="line">      width: 150px;</span><br><span class="line">      height: 50px;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;item item1&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;item item2 &quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li><li>五个div<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .main&#123;</span><br><span class="line">      width: 150px;</span><br><span class="line">      height: 150px;</span><br><span class="line">      background: red;</span><br><span class="line">      position: relative;</span><br><span class="line">    &#125;</span><br><span class="line">    .item&#123;</span><br><span class="line">      width: 50px;</span><br><span class="line">      height: 50px;</span><br><span class="line">      background: #fff;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    .item1&#123;</span><br><span class="line">      position: absolute;</span><br><span class="line">      left: 0;</span><br><span class="line">      top: 0;</span><br><span class="line">    &#125;</span><br><span class="line">    .item2&#123;</span><br><span class="line">      position: absolute;</span><br><span class="line">      left: 100px;</span><br><span class="line">      top: 0;</span><br><span class="line">    &#125;</span><br><span class="line">    .item3&#123;</span><br><span class="line">      position: absolute;</span><br><span class="line">      left: 0;</span><br><span class="line">      top: 100px;</span><br><span class="line">    &#125;</span><br><span class="line">    .item4&#123;</span><br><span class="line">      position: absolute;</span><br><span class="line">      left: 100px;</span><br><span class="line">      top: 100px;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div class=&quot;main&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;item item1&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;item item2&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;item item3&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;item item4&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li></ul><ol start="12"><li>渐进增强和优雅降级</li></ol><ul><li>渐进增强：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果交互等改进和追加功能以达到更好的用户体验</li><li>优雅降级：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容</li></ul><ol start="13"><li>实现一个div左上角到右下角的移动，有哪些方法，怎么实现</li></ol><ul><li>绝对定位方法改变left,top的值 left为window宽度-left宽度，top为window宽度-top宽度<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    *&#123;</span><br><span class="line">      margin: 0;</span><br><span class="line">      padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    .box&#123;</span><br><span class="line">      width: 100px;</span><br><span class="line">      height: 100px;</span><br><span class="line">      background: red;</span><br><span class="line">      position: absolute;</span><br><span class="line">      left: calc(100% - 100px);</span><br><span class="line">      top:  calc(100% - 100px);</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li><li>animation 方法<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    *&#123;</span><br><span class="line">      margin: 0;</span><br><span class="line">      padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line">    @keyframes move&#123;</span><br><span class="line">      from &#123;left:0;top:0;&#125;</span><br><span class="line">      to&#123;left:100%;top:100%;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .box&#123;</span><br><span class="line">      width: 100px;</span><br><span class="line">      height: 100px;</span><br><span class="line">      background: red;</span><br><span class="line">      position: absolute;</span><br><span class="line">      left: 0;</span><br><span class="line">      top: 0;</span><br><span class="line">      animation: move 2s;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li></ul><ol start="14"><li>rem和em的区别</li></ol><ul><li>em相对于父元素，rem相对于根元素</li></ul><ol start="15"><li>px和em的区别</li></ol><ul><li>em 指的是相对单位 em相对于父元素的字体大小 1em = 100%</li><li>px 绝对单位 简单的理解是文字的高度占多少个字符 </li></ul><ol start="16"><li>居中总结</li></ol><ul><li><p>水平居中</p><ul><li>行盒、行块盒水平居中 ，设置其父元素 text-align:center;</li><li>常规流块盒水平居中 定宽，margin: 0 auto (不定宽，设置为display:inline-block;设置其父元素text-align:center)</li><li>绝对定位元素水平居中，<ul><li>定宽，设置left:0,right:0，左右margin:auto(固定定位为特殊的绝对定位)</li><li>定宽，设置left:50%,margin-left:-(元素宽度的一半)</li><li>定宽或不定宽都可，设置left:50%,transform:translateX(-50%);</li></ul></li><li>浮动元素:margin-left,和margin-right调整</li><li>使用弹性布局，块盒的父元素添加属性 display:flex;justify-content:center;</li></ul></li><li><p>垂直居中</p><ul><li>单行文本垂直居中 设置其高度于行高</li><li>多行文本 没有完美方案，设置上下padding相同，但是不可确定其高度</li><li>块级元素<ul><li>使用绝对定位</li><li>定高，top:50% ,margin-top设为-（元素高度的一半）</li><li>定高或不定高都可，top:50%,transform:translateY(-50%)</li><li>定高，top:0;bottom:0;margin:auto 0;</li><li>弹性布局，给其父元素设置display:flex;align-items:center;</li></ul></li></ul></li><li><p>水平垂直居中</p><ul><li>已知宽度和高度的元素<ul><li>法一：设置绝对定位，top:0;bottom:0;left:0;right:0;margin:auto;</li><li>法二：设置绝对定位，left:50%;top:50%;margin-left:-(元素宽度的一半);margin-top:-(元素高度的一半)</li></ul></li><li>未知宽度和高度的元素<ul><li>法一：设置绝对定位，left:50%;top:50%;transform:translate(-50%,-50%);</li><li>法二：设置弹性布局,给其父元素设置display:flex;justify-content:center;align-items:center;</li><li> js获取宽度，设置绝对定位</li></ul></li><li>单行文本行盒、行块盒在其父元素包含块中水平垂直居中：给其父元素设置text-align:center;设置其高度于行高</li></ul></li></ul><ol start="17"><li>1rem、1em、1vh、1px各自代表的含义</li></ol><ul><li>rem rem全部元素相对于根元素html。通常做法是给html元素设置一个字体大小，然后其他元素的长度单位就为rem</li><li>em 子元素字体大小的em相对于父元素字体大小，元素的width/height/padding/margin用em的话就是相对于该元素的font-size</li><li>vw/vh 全称 Viewport Width 和 Viewport Heigth,视口的宽度和高度，相当于屏幕宽度和高度的1%,不过，处理宽度的时候%单位更合适,处理高度的话vh单位更好</li><li>px 像素（Pixel) 像素px是相对于显示器屏幕分辨率而言的 </li></ul><ol start="18"><li>画一条0.5px的直线</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">height:1px;</span><br><span class="line">transform:scale(0.5);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ol&gt;
&lt;li&gt;display的值有哪些&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;none inline inline-block block inherit list-item run-in table inline-table table-row table-row-group table-header-group table-footer-group table-column table-column-group table-cell table-caption&lt;/li&gt;
&lt;li&gt;none 此元素不会被显示&lt;/li&gt;
&lt;li&gt;block 块级元素&lt;/li&gt;
&lt;li&gt;inline 行内元素&lt;/li&gt;
&lt;li&gt;inline-block 行内块元素&lt;/li&gt;
&lt;li&gt;flex 弹性容器&lt;/li&gt;
&lt;li&gt;inline-flex&lt;/li&gt;
&lt;li&gt;inherit 从父元素继承display的值&lt;/li&gt;
&lt;li&gt;list-item 此元素会作为列表显示&lt;/li&gt;
&lt;li&gt;run-in 此元素会根据上下文作为块级元素或行内元素显示&lt;/li&gt;
&lt;li&gt;table 此元素会类似块级表格显示类似（table标签)&lt;/li&gt;
&lt;li&gt;inline-table 此元素会类似行内表格显示类似（table标签）&lt;/li&gt;
&lt;li&gt;table-row-group  此元素作为一个或多个行来的分组来显示（类似tbody标签）&lt;/li&gt;
&lt;li&gt;table-header-group 此元素作为一个或多个行来的分组来显示（类似thead标签）&lt;/li&gt;
&lt;li&gt;table-footer-group 此元素作为一个或多个行来的分组来显示（类似tfoot标签）&lt;/li&gt;
&lt;li&gt;table-row 此元素会作为一个表格行来显示（类似tr标签)&lt;/li&gt;
&lt;li&gt;table-column-group 此元素会作为一个或多个列的分组来显示（类似colgroup标签）&lt;/li&gt;
&lt;li&gt;table-column  此元素会作为一个单元格列来显示（col标签）&lt;/li&gt;
&lt;li&gt;table-cell 此元素会作为一个表格单元格显示（类似td th标签）&lt;/li&gt;
&lt;li&gt;table-caption 此元素会作为一个表格标题显示（类似caption标签） &lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;position的值有哪些&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;注意：static relative absolute fixed sticky 为常用取值&lt;/li&gt;
&lt;li&gt;static 默认值 没有定位，出现在正常的流中（忽略top bottom left right z-index)&lt;/li&gt;
&lt;li&gt;relative 相对定位 相对于其正常位置定位&lt;/li&gt;
&lt;li&gt;absolute 绝对定位 相对于static以外的第一个父元素进行定位&lt;/li&gt;
&lt;li&gt;fixed 固定定位 相对于浏览器可视窗口进行定位&lt;/li&gt;
&lt;li&gt;sticky 粘性定位 该定位基于用户滚动的位置&lt;/li&gt;
&lt;li&gt;inherit  规定应该从父元素继承该属性&lt;/li&gt;
&lt;li&gt;initial 设置该属性为默认值&lt;/li&gt;
&lt;li&gt;注意：绝对定位、固定定位一定是块盒，一定不是浮动元素，没有外边距合并</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>CSS3新特性</title>
    <link href="http://example.com/2021/06/14/CSS3%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://example.com/2021/06/14/CSS3%E6%96%B0%E7%89%B9%E6%80%A7/</id>
    <published>2021-06-14T04:44:25.000Z</published>
    <updated>2021-06-19T14:33:20.288Z</updated>
    
    <content type="html"><![CDATA[<h2 id="过渡-transition"><a href="#过渡-transition" class="headerlink" title="过渡(transition)"></a>过渡(transition)</h2><ul><li>是元素从一种样式逐渐改变为另一种效果</li><li>transition上至少写 transition(transition-property,transition-duration)</li><li>transition-property 规定应用过渡的CSS属性名称</li><li>transition-duration定义过渡效果花费的时间，默认为0</li><li>transition-timing-function 规定过渡效果的时间曲线</li><li>transition-delay 规定 过渡效果何时开始 默认为0</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">  width:100px;</span><br><span class="line">  height:100px;</span><br><span class="line">  background:#008c8c;</span><br><span class="line">  transition:width 2s,height 2s,linear 2s;</span><br><span class="line">&#125;</span><br><span class="line">div:hover&#123;</span><br><span class="line">  width:300px;</span><br><span class="line">  height:300px;</span><br><span class="line">  transform:rotate(180deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2D转换"><a href="#2D转换" class="headerlink" title="2D转换"></a>2D转换</h2><ul><li>CSS3 转换可以对元素进行移动、缩放、转动、拉长或拉伸</li><li>让某个元素改变大小 形状和位置</li><li>transform</li><li>transform-origin</li><li>translate(x,y)  定义2D转换，沿着X和Y轴移动元素，可分写-&gt;translateX(n)  translateY(n)</li><li>rotate(angle)在参数中规定角度</li><li>scale(x,y)  改变元素的宽度和高度 可分写</li><li>skew(x-angle，y-angle) 倾斜转换 沿着X和Y轴 可分写</li><li>matrix(n,n,n,n,n,n) 转换，使用六个值的矩阵<span id="more"></span></li></ul><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><ol><li>animation 所有动画的简写</li></ol><ul><li>语法：animation(name duration timing-function delay iteration-count direction fill-mode play-state;</li><li>animation-name @keyframes动画的名称</li><li>animation-duration 规定 动画完成一个周期所花费的秒或毫秒，默认为0</li><li>animation-timing-function 规定动画的速度曲线 默认为”ease”</li><li>animation-delay 规定动画何时开始，默认为0</li><li>animation-iteration-count 定义动画的被播放次数，默认为1</li><li>animation-direction 指定是否应该轮流反向播放动画，默认为normal</li><li>animation-fill-mode 规定当动画不播放时（当动画完成时，或当动画有一个延迟未开始播放时）要应用的元素</li><li>animation-play-state 指定动画是否正在运行或已暂停,默认是”running”</li></ul><ol start="2"><li>@keyframes规则</li></ol><ul><li>含义:创建动画，指定一个CSS样式和动画将逐步从目前的样式更改为新的样式</li><li>注意：当@keyframes创建动画，把它绑定到选择器上，否则不会有任何效果。animation上至少写着两个属性 animation(name, duration)</li></ul><ol start="3"><li>animation-timing-function 的不同取值 </li></ol><ul><li>ease 默认 动画以低速开始，然后加快，在结束后变慢</li><li>linear 动画从头到尾的速度是相同的</li><li>ease-in 动画以低速开始</li><li>ease-out 动画以低速结束</li><li>ease-in-out 动画以低速开始和结束</li><li>cubic-bezier(n,n,n,n) 在cubic-bezier函数中定义值，可能的值是从0-1的数值</li></ul><ol start="4"><li>animation-direction 定义是否循环交替反向播放动画</li></ol><ul><li>注意：动画被设置只播放一次，该属性不起作用</li><li>normal 默认值 动画按正常播放</li><li>reverse 动画反向播放</li><li>alternate 动画在奇数次正向播放，偶数次反向播放</li><li>alternate-reverse 动画在奇数次反向播放，偶数次正向播放</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@keyframes myfirst&#123;</span><br><span class="line">  from &#123;background:red;&#125;</span><br><span class="line">  to&#123;background:blue;&#125;</span><br><span class="line">&#125;</span><br><span class="line">div&#123;</span><br><span class="line">  width:100px;</span><br><span class="line">  height:100px;</span><br><span class="line">animation:myfirst 5s; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@keyframes move&#123;</span><br><span class="line">  0% &#123;background:red;left:0px; top:0px;&#125;</span><br><span class="line">  25% &#123;background:yellow;left:250px; top:0px;&#125;</span><br><span class="line">  50% &#123;background:blue;left:500px; top:0px;&#125;</span><br><span class="line">  75% &#123;background:#008c8c;left:750px; top:0px;&#125;</span><br><span class="line">  100% &#123;background:#f40;left:1000px; top:0px;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">div&#123;</span><br><span class="line">  width:100px;</span><br><span class="line">  height:100px;</span><br><span class="line">  position:relative;</span><br><span class="line">  /*animation:move 5s;*/</span><br><span class="line">  animation:move 5s linear 2s infinite alternate;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><ol><li>圆角（border-radius)</li></ol><ul><li>border-radius（分写属性：border-top-left-radius,border-top-right-radius,border-bottom-right-radius,border-bottom-left-radius)  </li><li>四个值：左上，右上，右下，左下</li><li>三个值：左上，右上和左下，右下</li><li>两个值：左上和右下，右上和左下 </li><li>一个值：4个圆角值相同</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">  width:100px;</span><br><span class="line">  height:100px;</span><br><span class="line">  border:1px solid #008c8c;</span><br><span class="line">  &lt;!-- border-radius:50% --&gt;</span><br><span class="line">  border0-radius:2px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>阴影（box-shadow)</li></ol><ul><li>box-shadow(x偏移量,y偏移量,阴影模糊半径，阴影扩散半径，阴影颜色）</li></ul><p><img src="https://wp.forzgc.cn/wp-content/uploads/2021/06/image-19.png"></p><ol start="3"><li>边界图片（border-image)</li></ol><ul><li>使用图片创建一个边框</li><li>有三个参数 图片链接（border-image-source) 图片裁剪位置(border-image-slice) 图片重复方式（border-image-repeat)</li><li></li></ul><h2 id="弹性盒子"><a href="#弹性盒子" class="headerlink" title="弹性盒子"></a>弹性盒子</h2><ol><li>声明弹性盒子的几种方式</li></ol><ul><li>display:flex;</li><li>display:inline-flex;</li></ul><ol start="2"><li>改变弹性盒子的几种方式</li></ol><ul><li><p>display:flex;</p></li><li><p>flex-direction （排列方向）</p><ul><li>row 按行排序</li><li>row-reverse 反向按行排序</li><li>column 按列排序</li><li>column-reverse 反向按列排序</li></ul></li><li><p>flex-wrap （折行）</p><ul><li>wrap 从上往下折</li><li>wrap-reverse 从下往上折</li></ul></li><li><p>flex-flow (弹性盒子方向改变和折行的简写方式)</p><ul><li>例如：flex-flow:colunm wrap</li></ul></li></ul><ol start="3"><li>主轴（justify-content)</li></ol><ul><li>center 元素从弹性容器中心开始</li><li>flex-start 元素紧靠主轴起点开始</li><li>flex-end 元素紧靠主轴终点开始</li><li>space-around 每个元素两侧的间隔相等。所以，项目间的间隔比边框的间隔大一倍</li><li>space-between 第一个元素靠起点，最后一个元素靠终点，余下元素平均分配空间</li><li>space-evenly 元素间距平均分配</li></ul><ol start="4"><li>交叉轴属性</li></ol><ul><li>align-items:center,flex-start,flex-end,basline stretch</li><li>align-self</li><li>align-content:flex-start flex-end center space-between space-around stretch</li></ul><ol start="5"><li><p>flex :flex-grow flex-shrink flex-basis</p></li><li><p>order属性可以改变flex项目的顺序</p></li></ol><h2 id="多媒体查询"><a href="#多媒体查询" class="headerlink" title="多媒体查询"></a>多媒体查询</h2><ul><li>语法<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@media not|only mediatype and (expressions)&#123;</span><br><span class="line">  CSS代码...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>all 用于所有多媒体类型设备</li><li>print 用于打印机</li><li>screen 用于电脑屏幕，平板，智能手机等</li><li>speech 用于屏幕阅读器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@media screen and(max-width:480px)&#123;</span><br><span class="line">  body&#123;</span><br><span class="line">    background-color:red</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@media screen and(max-width:1080px) and (min-width:480px)&#123;</span><br><span class="line">   body&#123;</span><br><span class="line">    background-color:red</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="渐变（gradients"><a href="#渐变（gradients" class="headerlink" title="渐变（gradients)"></a>渐变（gradients)</h2><ol><li>线性渐变（Linear Gradients) -向下/向上/向左/向右/对角方向,可书写多个颜色</li></ol><ul><li>默认情况下，线性渐变从上到下 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-image:linear-gradient(#e66465,#9198e5);</span><br></pre></td></tr></table></figure></li><li>从左到右/从右到左/从下到上/从左上角到右下角/从右上角到左下角<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">background-image:linear-gradient(to right,#e66465,#9198e5);</span><br><span class="line">background-image:linear-gradient(to left,#e66465,#9198e5);</span><br><span class="line">background-image:linear-gradient(to top,#e66465,#9198e5);</span><br><span class="line">background-image:linear-gradient(to bottom right,#e66465,#9198e5);</span><br><span class="line">background-image:linear-gradient(to bottom left,#e66465,#9198e5);</span><br></pre></td></tr></table></figure></li><li>使用角度，不用预定义方向，向上(0deg)/向下(180deg)/向右（90deg)/向左(-90deg)/向右上角（45deg)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-image:linear-gradient(-90deg,red,yellow)</span><br></pre></td></tr></table></figure></li><li>使用透明度<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-image:linear-gradient(to left,ragb(0,0,0,.1),ragba(0,0,0,1))</span><br></pre></td></tr></table></figure></li><li>重复的线性渐变<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-image:repeating-linear-gradient(red 10%,blue 20%);</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>径向渐变（Radial Gradients) - 由它们的中心定义</li></ol><ul><li>默认情况下，渐变的中心是 center(中心点),形状是ellipse(椭圆形)，渐变的大小是farthest-corner(表示到最远的角落)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">background-image:radial-gradient(shape size at position,start-color,...,last-color);</span><br><span class="line">background-image:radial-gradient(red,#008c8c);</span><br><span class="line">background-image:radial-gradient(red 5%,yellow 5%,green 60%);</span><br></pre></td></tr></table></figure></li><li>设置形状 circle(圆形)/ellipse（椭圆形，默认为ellipse(椭圆形)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-image:radial-gradient(circle 20% 20%,#E94E65, #1574A8);/* 渐变中心的位置设置在左上方 */</span><br></pre></td></tr></table></figure></li><li>不同大小尺寸关键字的作用（size参数定义了渐变的大小可以是 closest-side/farthest-size/closest-corner/farthest-corner<ul><li>closest-side 从中心点向外扩展渐变，到离中心点最近的一边结束</li><li>farthest-size 以离渐变中心点最远的那一边计算圆的半径 </li><li>closest-corner 以离渐变中心点最近的顶角的那一边计算圆的半径</li><li>farthest-corner  以离渐变中心点最远的顶角计算圆的半径<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">background-image:radial-gradient(farthest-size at 60% 55%,yellow,green);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li>重复的径向渐变<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">background-image:repeating-radial-gradient(yellow,green);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;过渡-transition&quot;&gt;&lt;a href=&quot;#过渡-transition&quot; class=&quot;headerlink&quot; title=&quot;过渡(transition)&quot;&gt;&lt;/a&gt;过渡(transition)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;是元素从一种样式逐渐改变为另一种效果&lt;/li&gt;
&lt;li&gt;transition上至少写 transition(transition-property,transition-duration)&lt;/li&gt;
&lt;li&gt;transition-property 规定应用过渡的CSS属性名称&lt;/li&gt;
&lt;li&gt;transition-duration定义过渡效果花费的时间，默认为0&lt;/li&gt;
&lt;li&gt;transition-timing-function 规定过渡效果的时间曲线&lt;/li&gt;
&lt;li&gt;transition-delay 规定 过渡效果何时开始 默认为0&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;div&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  width:100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  height:100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  background:#008c8c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  transition:width 2s,height 2s,linear 2s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;div:hover&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  width:300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  height:300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  transform:rotate(180deg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;2D转换&quot;&gt;&lt;a href=&quot;#2D转换&quot; class=&quot;headerlink&quot; title=&quot;2D转换&quot;&gt;&lt;/a&gt;2D转换&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;CSS3 转换可以对元素进行移动、缩放、转动、拉长或拉伸&lt;/li&gt;
&lt;li&gt;让某个元素改变大小 形状和位置&lt;/li&gt;
&lt;li&gt;transform&lt;/li&gt;
&lt;li&gt;transform-origin&lt;/li&gt;
&lt;li&gt;translate(x,y)  定义2D转换，沿着X和Y轴移动元素，可分写-&amp;gt;translateX(n)  translateY(n)&lt;/li&gt;
&lt;li&gt;rotate(angle)在参数中规定角度&lt;/li&gt;
&lt;li&gt;scale(x,y)  改变元素的宽度和高度 可分写&lt;/li&gt;
&lt;li&gt;skew(x-angle，y-angle) 倾斜转换 沿着X和Y轴 可分写&lt;/li&gt;
&lt;li&gt;matrix(n,n,n,n,n,n) 转换，使用六个值的矩阵</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>面试总结1 （html html5)</title>
    <link href="http://example.com/2021/06/13/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%931(html+html5)/"/>
    <id>http://example.com/2021/06/13/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%931(html+html5)/</id>
    <published>2021-06-13T09:18:25.000Z</published>
    <updated>2021-06-21T02:21:58.259Z</updated>
    
    <content type="html"><![CDATA[<ol><li>五大主流浏览器及其内核</li></ol><ul><li>Chrome -&gt;Webkit/Blink</li><li>Firefox -&gt;Gecko</li><li>IE -&gt;Trident</li><li>Safari -&gt;Webkit</li><li>Opera -&gt;Presto/Blink</li></ul><ol start="2"><li>块级元素和行内元素有哪些，空元素</li></ol><ul><li><p>块级元素：h1-h6 div p ul ol dl dt dd li table hr pre  form  ,h5新增 footer  head nav aside section main article audio video canvas output</p></li><li><p>行内元素 a br  img map button input  i em b code del  select q label sub sup  strong small  texture span mark city abbr</p></li><li><p>空元素：即没有内容的HTML元素，例：br meta hr link input img</p></li></ul><ol start="3"><li>html和h5怎么区分</li></ol><ul><li>DOCTYPE声明</li><li>结构语义化区别：html没有结构化语义化的标签，html5有</li><li>绘图区别</li><li>音频和视频的支持，html要用flash播放器支持，不支持audio,video标签，html5支持</li><li>语法处理，html无法对不准确的语法，html5可以<span id="more"></span></li></ul><ol start="4"><li>html5和html的区别</li></ol><ul><li>html5新增了语义化标签</li><li>html5完全支持css3</li><li>支持本地离线缓存</li><li>新增了canvas标签</li><li>新增了视频和音频标签<br>（HTML5离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失。sessionStorage 数据在浏览器关闭后自动删除）</li></ul><ol start="5"><li>h5新增元素移除的元素，css3新增用法废弃的用法</li></ol><ul><li>h5 新增元素</li><li>新增画图元素 canvas</li><li>新增多媒体标签 video audio</li><li>新增语义化元素 header footer nav article section aside  figure fig caption bid command dialog rt rp time summary 等</li><li>移除元素 big dir font center frame strike applet basefont</li><li>css新增</li><li>border-color,border-image,border-radius,box-shadow,background-size,background-clip,background-repeat,background-origin,text-shadow, word-wrap,transform,animation, transition</li></ul><ol start="6"><li>选择器，他们的优先级</li></ol><ul><li>ID选择器 类选择器 伪类选择器  属性选择器 元素选择器 伪元素选择器 通配符选择器 (子选择器 后代选择器 相邻选择器)</li><li>千位 内联样式</li><li>百位 ID选择器</li><li>十位 类选择器 属性选择器 伪类选择器</li><li>个位 元素选择器 伪元素选择器</li><li>选择器的组合</li></ul><ol><li><p>并且 不加任何元素组合在一起</p></li><li><p>后代元素 - 空格</p></li><li><p>子元素 - &gt;</p></li><li><p>相邻元素 - +</p></li><li><p>后面出现的所有兄弟元素 - ～</p></li><li><p>优先级计算</p></li></ol><ul><li>比较重要性 1作者样式表中!important样式 ,2作者样式表中的普通样式3浏览器默认样式</li><li>比较特殊性 看选择器</li><li>看源次序，代码靠后的胜出</li></ul><ol start="8"><li><p>可继承属性 font-size font-family color text-indent 不可继承属性 border width height margin padding</p></li><li><p> css构成 元素构成</p></li></ol><ul><li>css由选择器和声明块构成，声明块包括多个（属性 + 属性值）css规则 = 选择器 + 声明块</li><li>元素 = 起始标记 + 结束标记 + 元素内容 + 元素属性</li></ul><ol start="10"><li>外部样式表的好处</li></ol><ul><li>解决多页面样式重复的问题</li><li>有利用浏览器缓存，提高页面响应效率</li><li>有利于代码分离，更利于维护</li></ul><ol start="11"><li>块级元素和行内元素的区别</li></ol><ul><li>块级元素独占一行，行内元素不换行，块级元素可以包含行内元素，行内元素不可以包含块级元素(a除外）</li><li>但是现在元素的包含关系由元素的内容类别来决定</li></ul><ol start="12"><li>如何理解语义化</li></ol><ul><li>为了让搜索引擎优化</li><li>为了让浏览器理解网页</li><li>便于团队开发和维护，语义化更具有可有性</li></ul><ol start="13"><li>id与class的区别</li></ol><ul><li>class 用于设置标签的类，用来指定元素属于何种样式的类。</li><li>id 用于定义id独特的样式</li><li>class是可重复的，id是唯一的</li></ul><ol start="14"><li><p>如何看待前端模块化</p></li><li><p>如何看待前后端分离</p></li><li><p>浏览器兼容性问题</p></li><li><p>对浏览器内核的理解</p></li></ol><ul><li>主要分成两部分：渲染引擎和js引擎</li><li>渲染引擎：负责取得网页的内容（HTML、图像等）。整理讯息（例如加入CSS等），以及计算网页的显示方式，然后输出至显示器或打印机。浏览器内核的不同对于网页的语法解释会有不同，所以渲染的效果会不同。所有的网页浏览器、电子邮件客户端以及其他需要编辑、显示网络内容的应用程序都需要内核</li><li>js引擎解析和执行javascript来实现网页的动态效果</li></ul><ol start="18"><li>前端页面有哪三层构成，分别是什么，作用是什么</li></ol><ul><li>结构层 由HTML或XHTML之类的标记语言创建，仅负责语义的表达，解决页面内容是什么的问题</li><li>表示层 由CSS负责，解决如何显示内容的问题</li><li>行为层：由脚本负责。解决页面上内容应该如何对事件作出反应的问题</li></ul><ol start="19"><li>src与href的区别</li></ol><ul><li>href 是指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，用于超链接</li><li>src 是指外部资源的位置，指向的内容嵌入到文档中当前标签所在位置。在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将js脚本放在底部而不是头部。</li></ul><ol start="20"><li>什么是CSS Hack</li></ol><ul><li>一般来说是针对不同的浏览器写不同的CSS,就是CSS Hack</li><li>IE浏览器Hack一般又分为三种，条件Hack、属性级Hack、选择符Hack</li></ul><ol start="21"><li>同步和异步的区别</li></ol><ul><li>同步就是阻塞模式，异步就是非阻塞模式</li><li>同步就是指一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，那么这个进程会一直等待下去，直到收到返回信息才继续执行</li><li>异步是指进程不需要一直等下去，而是继续执行下面的操作，不管其他进程的状态，当又消息返回时系统会通知进程进行处理，这样可以提高执行的效率</li></ul>]]></content>
    
    
    <summary type="html">&lt;ol&gt;
&lt;li&gt;五大主流浏览器及其内核&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Chrome -&amp;gt;Webkit/Blink&lt;/li&gt;
&lt;li&gt;Firefox -&amp;gt;Gecko&lt;/li&gt;
&lt;li&gt;IE -&amp;gt;Trident&lt;/li&gt;
&lt;li&gt;Safari -&amp;gt;Webkit&lt;/li&gt;
&lt;li&gt;Opera -&amp;gt;Presto/Blink&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;块级元素和行内元素有哪些，空元素&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;块级元素：h1-h6 div p ul ol dl dt dd li table hr pre  form  ,h5新增 footer  head nav aside section main article audio video canvas output&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;行内元素 a br  img map button input  i em b code del  select q label sub sup  strong small  texture span mark city abbr&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;空元素：即没有内容的HTML元素，例：br meta hr link input img&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;html和h5怎么区分&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;DOCTYPE声明&lt;/li&gt;
&lt;li&gt;结构语义化区别：html没有结构化语义化的标签，html5有&lt;/li&gt;
&lt;li&gt;绘图区别&lt;/li&gt;
&lt;li&gt;音频和视频的支持，html要用flash播放器支持，不支持audio,video标签，html5支持&lt;/li&gt;
&lt;li&gt;语法处理，html无法对不准确的语法，html5可以</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/06/13/hello-world/"/>
    <id>http://example.com/2021/06/13/hello-world/</id>
    <published>2021-06-13T04:14:04.756Z</published>
    <updated>2021-06-13T04:14:04.756Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
